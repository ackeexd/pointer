#include <iostream>
#include <windows.h>
#pragma once
using namespace std;

class Student
{
	string name;
	int age;

	int* hometasks = nullptr; // динамический массив оценок по ДЗ
	int hometasks_count = 0; // количество оценок по ДЗ, сеттер для такого поля делать не нужно!
	// наличие публичного сеттера для поля hometasks_count может сломать всю логику по работе со студентом

public:
	Student();
	// конструктор копирования 
    // в тот момент, когда в любом месте проекта создаётся копия объекта типа Student,
    // программа вызывает специфический конструктор
    // задача конструктора копирования: под каждое поле-указатель, которое хранит адрес какого-то динамически созданного объекта или даже целого массива объектов
    // должна быть явно выделена новая память (копия студента создаёт для себя копию массива оценок)
    // параметр не может быть с типом класса (просто, без & или *) - потому что будет происходить передача по значению, которая влечёт за собой создание копии, а копию кто-то должен сделать 
    // const перед типом Student& запрещает менять состояние оригинального объекта 
	Student(const Student& original);
	void AddRate(int rate);
	void PrintHomeTaskRates() const;
    ~Student();
};

// объект такого класса может скопировать данные по студенту в файл, БД или экселевскую таблицу
//class StudentFileWriter
//{
//public:
//	void SaveStudentToFile(Student copy, string path_to_file)
//	{
//		// передача студента происходит по значению
//		// 
//		// алгоритм по записи данных о студенте в файл
//		// FILE* f;
//		// fwrite(...);
//	}
//
//};
